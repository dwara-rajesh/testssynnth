/* Prevent glibcâ€™s bits/types/struct_timespec.h from defining timespec */
#define _STRUCT_TIMESPEC

#include <alsa/asoundlib.h>
#include <math.h>
#include <stdlib.h>
#include <stdio.h>
#include <stdint.h>

#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif

#define SAMPLE_RATE    44100
#define FREQUENCY      440.0
#define CHANNELS       2
#define BUFFER_FRAMES  1024

int main(void) {
    snd_pcm_t *pcm;
    snd_pcm_hw_params_t *hw;
    int dir, err;
    unsigned int rate = SAMPLE_RATE;
    snd_pcm_uframes_t frames = BUFFER_FRAMES;

    // 1) Open default playback device
        if ((err = snd_pcm_open(&pcm, "plughw:1,0",
                                SND_PCM_STREAM_PLAYBACK, 0)) < 0) {
            fprintf(stderr, "Error opening PCM device: %s\n",
                    snd_strerror(err));
            return 1;
        }
    // 2) Configure hardware parameters
    snd_pcm_hw_params_malloc(&hw);
    snd_pcm_hw_params_any(pcm, hw);
    snd_pcm_hw_params_set_access(pcm, hw, SND_PCM_ACCESS_RW_INTERLEAVED);
    snd_pcm_hw_params_set_format(pcm, hw, SND_PCM_FORMAT_S16_LE);
    snd_pcm_hw_params_set_channels(pcm, hw, CHANNELS);
    snd_pcm_hw_params_set_rate_near(pcm, hw, &rate, 0);
    snd_pcm_hw_params_set_period_size_near(pcm, hw, &frames, &dir);
    if ((err = snd_pcm_hw_params(pcm, hw)) < 0) {
        fprintf(stderr, "Unable to set HW params: %s\n", snd_strerror(err));
        return 1;
    }
    snd_pcm_hw_params_free(hw);
    snd_pcm_prepare(pcm);

    // 3) Allocate buffer
    int16_t *buffer = malloc(sizeof(int16_t) * frames * CHANNELS);
    if (!buffer) {
        perror("malloc");
        return 1;
    }

    // 4) Phase setup
    double phase = 0.0;
    double phase_inc = 2.0 * M_PI * FREQUENCY / SAMPLE_RATE;

    // 5) Play forever
    while (1) {
        for (snd_pcm_uframes_t i = 0; i < frames; ++i) {
            int16_t sample = (int16_t)(sin(phase) * 32767.0);
            phase += phase_inc;
            if (phase >= 2.0 * M_PI) phase -= 2.0 * M_PI;
            buffer[2*i    ] = sample;  // left
            buffer[2*i + 1] = sample;  // right
        }
        err = snd_pcm_writei(pcm, buffer, frames);
        if (err == -EPIPE) {
            // underrun
            snd_pcm_prepare(pcm);
        } else if (err < 0) {
            fprintf(stderr, "Write error: %s\n", snd_strerror(err));
            break;
        }
    }

    // 6) Cleanup
    snd_pcm_drain(pcm);
    snd_pcm_close(pcm);
    free(buffer);
    return 0;
}
