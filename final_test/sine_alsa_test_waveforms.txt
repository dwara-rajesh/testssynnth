/* Prevent glibc’s bits/types/struct_timespec.h from defining timespec twice */
#define _STRUCT_TIMESPEC

#include <alsa/asoundlib.h>
#include <math.h>
#include <stdlib.h>
#include <stdio.h>
#include <stdint.h>

#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif

#define SAMPLE_RATE     44100
#define CHANNELS        2
#define BUFFER_FRAMES   1024
#define SEGMENT_SECONDS 4
#define BASE_FREQUENCY  440.0

// Compute how many frames in one 4‑second segment
static const snd_pcm_uframes_t FRAMES_PER_SEGMENT = SAMPLE_RATE * SEGMENT_SECONDS;

// Musical semitone interval
static const double SEMITONE_RATIO = 1.0 / 12.0;

// Simple waveform oscillators
typedef struct {
    double phase, step;
} Osc;

static void osc_init(Osc *o, double freq) {
    o->phase = 0.0;
    o->step  = freq / SAMPLE_RATE;
}

static double osc_sine(Osc *o) {
    double v = sin(2.0*M_PI * o->phase);
    o->phase += o->step;
    if (o->phase >= 1.0) o->phase -= floor(o->phase);
    return v;
}

static double osc_triangle(Osc *o) {
    double v = (o->phase < 0.5)
               ? (4.0*o->phase - 1.0)
               : (3.0 - 4.0*o->phase);
    o->phase += o->step;
    if (o->phase >= 1.0) o->phase -= floor(o->phase);
    return v;
}

static double osc_square(Osc *o) {
    double v = (o->phase < 0.5) ? 1.0 : -1.0;
    o->phase += o->step;
    if (o->phase >= 1.0) o->phase -= floor(o->phase);
    return v;
}

int main(void) {
    snd_pcm_t *pcm;
    snd_pcm_hw_params_t *hw;
    int err, dir;
    unsigned int rate = SAMPLE_RATE;
    snd_pcm_uframes_t period = BUFFER_FRAMES;

    // 1) Open the USB device directly (card 1, device 0)
    if ((err = snd_pcm_open(&pcm, "plughw:1,0",
                            SND_PCM_STREAM_PLAYBACK, 0)) < 0) {
        fprintf(stderr, "Error opening PCM device: %s\n",
                snd_strerror(err));
        return 1;
    }

    // 2) HW parameters
    snd_pcm_hw_params_malloc(&hw);
    snd_pcm_hw_params_any(pcm, hw);
    snd_pcm_hw_params_set_access(pcm, hw, SND_PCM_ACCESS_RW_INTERLEAVED);
    snd_pcm_hw_params_set_format(pcm, hw, SND_PCM_FORMAT_S16_LE);
    snd_pcm_hw_params_set_channels(pcm, hw, CHANNELS);
    snd_pcm_hw_params_set_rate_near(pcm, hw, &rate, 0);
    snd_pcm_hw_params_set_period_size_near(pcm, hw, &period, &dir);
    if ((err = snd_pcm_hw_params(pcm, hw)) < 0) {
        fprintf(stderr, "Unable to set HW params: %s\n",
                snd_strerror(err));
        return 1;
    }
    snd_pcm_hw_params_free(hw);
    snd_pcm_prepare(pcm);

    // 3) Allocate buffer
    int16_t *buffer = malloc(sizeof(int16_t) * period * CHANNELS);
    if (!buffer) {
        perror("malloc");
        return 1;
    }

    // 4) Oscillators for each waveform
    Osc osc_s, osc_t, osc_q;
    double frequency = BASE_FREQUENCY;
    unsigned long long frame_count = 0;

    // Initialize all with base frequency
    osc_init(&osc_s, frequency);
    osc_init(&osc_t, frequency);
    osc_init(&osc_q, frequency);

    // 5) Continuous playback, switching every 4s and increasing freq every 12s
    while (1) {
        for (snd_pcm_uframes_t i = 0; i < period; ++i, ++frame_count) {
            // Determine which 4s segment we’re in (0=sine, 1=triangle, 2=square)
            unsigned seg = (frame_count / FRAMES_PER_SEGMENT) % 3;

            // On segment boundary, if it’s the start of a new 12s cycle, bump freq
            if (frame_count % (FRAMES_PER_SEGMENT * 3) == 0 && frame_count != 0) {
                frequency *= pow(2.0, SEMITONE_RATIO);
                osc_init(&osc_s, frequency);
                osc_init(&osc_t, frequency);
                osc_init(&osc_q, frequency);
            }

            // Also re-init oscillator at start of each segment to keep phase coherent
            if (frame_count % FRAMES_PER_SEGMENT == 0) {
                if (seg == 0) osc_init(&osc_s, frequency);
                else if (seg == 1) osc_init(&osc_t, frequency);
                else             osc_init(&osc_q, frequency);
            }

            // Generate sample
            double v = (seg == 0)
                       ? osc_sine(&osc_s)
                       : (seg == 1)
                         ? osc_triangle(&osc_t)
                         : osc_square(&osc_q);

            int16_t sample = (int16_t)(v * 32767.0);
            buffer[2*i    ] = sample;  // left
            buffer[2*i + 1] = sample;  // right
        }

        // Write one period
        err = snd_pcm_writei(pcm, buffer, period);
        if (err == -EPIPE) {
            // Underrun: recover
            snd_pcm_prepare(pcm);
        } else if (err < 0) {
            fprintf(stderr, "Write error: %s\n", snd_strerror(err));
            break;
        }
    }

    // 6) Cleanup
    snd_pcm_drain(pcm);
    snd_pcm_close(pcm);
    free(buffer);
    return 0;
}
