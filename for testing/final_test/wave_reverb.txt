/* Prevent glibc’s bits/types/struct_timespec.h from defining timespec twice */
#define _STRUCT_TIMESPEC

#include <alsa/asoundlib.h>
#include <math.h>
#include <stdlib.h>
#include <stdio.h>
#include <stdint.h>

#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif

#define SAMPLE_RATE       44100
#define CHANNELS          2
#define BUFFER_FRAMES     1024

// playback segments
#define SEGMENT_SECONDS   4
#define BASE_FREQUENCY    440.0
#define SEMITONE_RATIO    (1.0/12.0)

// reverb parameters
#define REVERB_DELAY_SEC  0.75
#define REVERB_FEEDBACK   0.5
#define REVERB_MIX        0.5

// frames per 4s segment
static const snd_pcm_uframes_t FRAMES_PER_SEGMENT =
    SAMPLE_RATE * SEGMENT_SECONDS;
// frames in our 0.75s delay line
static const int DELAY_FRAMES =
    (int)(REVERB_DELAY_SEC * SAMPLE_RATE);

// simple phase‐increment oscillator state
typedef struct { double phase, step; } Osc;
static void osc_init(Osc *o, double freq) {
    o->phase = 0.0;  o->step = freq / SAMPLE_RATE;
}
static double osc_sine(Osc *o) {
    double v = sin(2.0*M_PI * o->phase);
    o->phase += o->step;
    if (o->phase >= 1.0) o->phase -= floor(o->phase);
    return v;
}
static double osc_triangle(Osc *o) {
    double v = (o->phase < 0.5
                ? 4.0*o->phase - 1.0
                : 3.0 - 4.0*o->phase);
    o->phase += o->step;
    if (o->phase >= 1.0) o->phase -= floor(o->phase);
    return v;
}
static double osc_square(Osc *o) {
    double v = (o->phase < 0.5 ? 1.0 : -1.0);
    o->phase += o->step;
    if (o->phase >= 1.0) o->phase -= floor(o->phase);
    return v;
}

int main(void) {
    snd_pcm_t *pcm;
    snd_pcm_hw_params_t *hw;
    int err, dir;
    unsigned int rate = SAMPLE_RATE;
    snd_pcm_uframes_t period = BUFFER_FRAMES;

    // 1) Open USB audio (card 1, device 0)
    if ((err = snd_pcm_open(&pcm, "plughw:1,0",
                            SND_PCM_STREAM_PLAYBACK, 0)) < 0) {
        fprintf(stderr, "PCM open error: %s\n", snd_strerror(err));
        return 1;
    }

    // 2) Configure HW params
    snd_pcm_hw_params_malloc(&hw);
    snd_pcm_hw_params_any(pcm, hw);
    snd_pcm_hw_params_set_access(pcm, hw, SND_PCM_ACCESS_RW_INTERLEAVED);
    snd_pcm_hw_params_set_format(pcm, hw, SND_PCM_FORMAT_S16_LE);
    snd_pcm_hw_params_set_channels(pcm, hw, CHANNELS);
    snd_pcm_hw_params_set_rate_near(pcm, hw, &rate, 0);
    snd_pcm_hw_params_set_period_size_near(pcm, hw, &period, &dir);
    if ((err = snd_pcm_hw_params(pcm, hw)) < 0) {
        fprintf(stderr, "HW params error: %s\n", snd_strerror(err));
        return 1;
    }
    snd_pcm_hw_params_free(hw);
    snd_pcm_prepare(pcm);

    // 3) Allocate the audio buffer
    int16_t *buffer = malloc(sizeof(int16_t) * period * CHANNELS);
    if (!buffer) { perror("malloc"); return 1; }

    // 4) Allocate and zero the delay‐line
    double *delayLine = calloc(DELAY_FRAMES, sizeof(double));
    if (!delayLine) { perror("calloc"); return 1; }
    int delayIndex = 0;

    // 5) Oscillators
    Osc osc_s, osc_t, osc_q;
    double frequency = BASE_FREQUENCY;
    unsigned long long frameCount = 0;

    // init oscillators
    osc_init(&osc_s, frequency);
    osc_init(&osc_t, frequency);
    osc_init(&osc_q, frequency);

    // 6) Main loop
    while (1) {
        for (snd_pcm_uframes_t i = 0; i < period; ++i, ++frameCount) {
            // Which 4s segment? 0=sine,1=triangle,2=square
            unsigned seg = (frameCount / FRAMES_PER_SEGMENT) % 3;

            // Every 12s (3 segments) increase pitch by one semitone
            if (frameCount % (FRAMES_PER_SEGMENT * 3) == 0 && frameCount != 0) {
                frequency *= pow(2.0, SEMITONE_RATIO);
                osc_init(&osc_s, frequency);
                osc_init(&osc_t, frequency);
                osc_init(&osc_q, frequency);
            }

            // Reset phase at start of each 4s segment
            if (frameCount % FRAMES_PER_SEGMENT == 0) {
                if (seg == 0) osc_init(&osc_s, frequency);
                else if (seg == 1) osc_init(&osc_t, frequency);
                else            osc_init(&osc_q, frequency);
            }

            // Generate raw waveform
            double dry = (seg == 0
                          ? osc_sine(&osc_s)
                          : seg == 1
                            ? osc_triangle(&osc_t)
                            : osc_square(&osc_q));

            // Simple feedback delay reverb
            double delayed = delayLine[delayIndex];
            double wet     = dry + delayed * REVERB_MIX;
            // write back into delay line (feedback + new input)
            delayLine[delayIndex] = dry + delayed * REVERB_FEEDBACK;
            delayIndex = (delayIndex + 1) % DELAY_FRAMES;

            // Scale to int16
            int16_t sample = (int16_t)(wet * 32767.0);
            buffer[2*i    ] = sample;
            buffer[2*i + 1] = sample;
        }

        // Write to ALSA
        err = snd_pcm_writei(pcm, buffer, period);
        if (err == -EPIPE) {
            snd_pcm_prepare(pcm);  // underrun recovery
        } else if (err < 0) {
            fprintf(stderr, "Write error: %s\n", snd_strerror(err));
            break;
        }
    }

    // 7) Cleanup
    snd_pcm_drain(pcm);
    snd_pcm_close(pcm);
    free(buffer);
    free(delayLine);
    return 0;
}
